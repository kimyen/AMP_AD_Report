-- Access Record about entities in AMP_AD project in this month
CREATE TABLE ampad.JUN (
SESSION_ID CHAR(36),
TIMESTAMP BIGINT(20),
ELAPSE_MS BIGINT(20),
RETURN_OBJECT_ID VARCHAR(22),
USER_ID BIGINT(20),
DATE DATE,
METHOD enum('GET','PUT','POST','DELETE'),
RESPONSE_STATUS INT(11),
ENTITY_ID BIGINT(20),
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
NORMALIZED_METHOD_SIGNATURE VARCHAR(100)
);

INSERT IGNORE INTO ampad.JUN
SELECT AR.SESSION_ID, AR.TIMESTAMP, AR.ELAPSE_MS, AR.RETURN_OBJECT_ID, AR.USER_ID, AR.DATE, AR.METHOD, AR.RESPONSE_STATUS,
	PAR.ENTITY_ID, PAR.CLIENT, PAR.NORMALIZED_METHOD_SIGNATURE
FROM warehouse.ACCESS_RECORD AR, warehouse.PROCESSED_ACCESS_RECORD PAR
WHERE AR.SESSION_ID = PAR.SESSION_ID
	AND AR.TIMESTAMP = PAR.TIMESTAMP
	AND AR.TIMESTAMP BETWEEN 1433116800000 AND (1435708800000 - 1)
	AND PAR.ENTITY_ID IN (SELECT * FROM ampad.ENTITY_ID);

-- Access Record represents web views
CREATE TABLE ampad.WEB_ACCESS_JUN (
SESSION_ID CHAR(36),
TIMESTAMP BIGINT(20),
ELAPSE_MS BIGINT(20),
RETURN_OBJECT_ID VARCHAR(22),
USER_ID BIGINT(20),
DATE DATE,
METHOD enum('GET','PUT','POST','DELETE'),
RESPONSE_STATUS INT(11),
ENTITY_ID BIGINT(20),
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
NORMALIZED_METHOD_SIGNATURE VARCHAR(100)
);

INSERT IGNORE INTO ampad.WEB_ACCESS_JUN
SELECT * FROM ampad.JUN
WHERE CLIENT = 'WEB'
	AND (NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/bundle'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/bundle'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2/#');

-- Access Record represents R access
CREATE TABLE ampad.R_ACCESS_JUN (
SESSION_ID CHAR(36),
TIMESTAMP BIGINT(20),
ELAPSE_MS BIGINT(20),
RETURN_OBJECT_ID VARCHAR(22),
USER_ID BIGINT(20),
DATE DATE,
METHOD enum('GET','PUT','POST','DELETE'),
RESPONSE_STATUS INT(11),
ENTITY_ID BIGINT(20),
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
NORMALIZED_METHOD_SIGNATURE VARCHAR(100)
);

INSERT IGNORE INTO ampad.R_ACCESS_JUN 
SELECT * FROM ampad.JUN
WHERE CLIENT = 'R'
	AND (NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/doi'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/doi'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/bundle'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/bundle'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/annotations'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/annotations'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/filepreview'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/filepreview'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/filehandles'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/filehandles'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wikikey'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2/#');

-- Access Record represents Python access
CREATE TABLE ampad.PY_ACCESS_JUN (
SESSION_ID CHAR(36),
TIMESTAMP BIGINT(20),
ELAPSE_MS BIGINT(20),
RETURN_OBJECT_ID VARCHAR(22),
USER_ID BIGINT(20),
DATE DATE,
METHOD enum('GET','PUT','POST','DELETE'),
RESPONSE_STATUS INT(11),
ENTITY_ID BIGINT(20),
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
NORMALIZED_METHOD_SIGNATURE VARCHAR(100)
);

INSERT IGNORE INTO ampad.PY_ACCESS_JUN 
SELECT * FROM ampad.JUN
WHERE CLIENT = 'PYTHON'
	AND (NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/doi'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/doi'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/bundle'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/bundle'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/annotations'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/annotations'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/filepreview'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/filepreview'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/filehandles'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/filehandles'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wikikey'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2/#');

-- Access Record represents JAVA access
CREATE TABLE ampad.JAVA_ACCESS_JUN (
SESSION_ID CHAR(36),
TIMESTAMP BIGINT(20),
ELAPSE_MS BIGINT(20),
RETURN_OBJECT_ID VARCHAR(22),
USER_ID BIGINT(20),
DATE DATE,
METHOD enum('GET','PUT','POST','DELETE'),
RESPONSE_STATUS INT(11),
ENTITY_ID BIGINT(20),
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
NORMALIZED_METHOD_SIGNATURE VARCHAR(100)
);

INSERT IGNORE INTO ampad.JAVA_ACCESS_JUN 
SELECT * FROM ampad.JUN
WHERE CLIENT = 'JAVA'
	AND (NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/doi'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/doi'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/bundle'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/bundle'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/annotations'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/annotations'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/filepreview'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/filepreview'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/filehandles'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/filehandles'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wikikey'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki/#'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2'
		OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2/#');

-- Access Record represents file download
CREATE TABLE ampad.DOWNLOAD_JUN (
SESSION_ID CHAR(36),
TIMESTAMP BIGINT(20),
ELAPSE_MS BIGINT(20),
RETURN_OBJECT_ID VARCHAR(22),
USER_ID BIGINT(20),
DATE DATE,
METHOD enum('GET','PUT','POST','DELETE'),
RESPONSE_STATUS INT(11),
ENTITY_ID BIGINT(20),
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
NORMALIZED_METHOD_SIGNATURE VARCHAR(100)
);

INSERT IGNORE INTO ampad.DOWNLOAD_JUN
SELECT * FROM ampad.JUN
WHERE NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/file' 
	OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/version/#/file';

CREATE TABLE ampad.DOWNLOAD (
USER_ID BIGINT(20),
SUCCESS BOOLEAN,
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
MONTH CHAR(3),
ENTITY_ID BIGINT(20)
);

INSERT IGNORE INTO ampad.DOWNLOAD
SELECT USER_ID, IF(RESPONSE_STATUS < 400, TRUE, FALSE) AS SUCCESS, CLIENT, 'OCT' AS MONTH, ENTITY_ID
FROM ampad.DOWNLOAD_OCT;

CREATE TABLE ampad.VIEW (
USER_ID BIGINT(20),
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
MONTH CHAR(3),
ENTITY_ID BIGINT(20)
);

INSERT IGNORE INTO ampad.VIEW
SELECT USER_ID, CLIENT, 'OCT' AS MONTH, ENTITY_ID
FROM ampad.WEB_ACCESS_OCT;

INSERT IGNORE INTO ampad.VIEW
SELECT USER_ID, CLIENT, 'OCT' AS MONTH, ENTITY_ID
FROM ampad.PY_ACCESS_OCT;

INSERT IGNORE INTO ampad.VIEW
SELECT USER_ID, CLIENT, 'OCT' AS MONTH, ENTITY_ID
FROM ampad.R_ACCESS_OCT;

INSERT IGNORE INTO ampad.VIEW
SELECT USER_ID, CLIENT, 'OCT' AS MONTH, ENTITY_ID
FROM ampad.JAVA_ACCESS_OCT;

ALTER TABLE ampad.DOWNLOAD
ADD COLUMN SAGE BOOLEAN;

update ampad.DOWNLOAD
set SAGE = IF (USER_ID IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959), TRUE, FALSE); 

CREATE TABLE ampad.OCT_NONSAGE_VIEW AS
SELECT ENTITY_ID, COUNT(*) AS OCT
FROM ampad.VIEW
WHERE SAGE = FALSE
AND MONTH = 'OCT'
GROUP BY ENTITY_ID;

CREATE TABLE ampad.OCT_SAGE_VIEW AS
SELECT ENTITY_ID, COUNT(*) AS OCT
FROM ampad.VIEW
WHERE SAGE = TRUE
AND MONTH = 'OCT'
GROUP BY ENTITY_ID;

CREATE TABLE ampad.OCT_USER_VIEW AS
SELECT USER_ID, COUNT(*) AS OCT
FROM ampad.VIEW
WHERE MONTH = 'OCT'
GROUP BY USER_ID;

CREATE TABLE ampad.OCT_NONSAGE_DOWNLOAD AS
SELECT ENTITY_ID, COUNT(*) AS ATTEMPT, SUM(IF(SUCCESS, 1, 0)) AS SUCCESS
FROM ampad.DOWNLOAD
WHERE SAGE = FALSE
AND MONTH = 'OCT'
GROUP BY ENTITY_ID;

CREATE TABLE ampad.OCT_SAGE_DOWNLOAD AS
SELECT ENTITY_ID, COUNT(*) AS ATTEMPT, SUM(IF(SUCCESS, 1, 0)) AS SUCCESS
FROM ampad.DOWNLOAD
WHERE SAGE = TRUE
AND MONTH = 'OCT'
GROUP BY ENTITY_ID;

CREATE TABLE ampad.OCT_USER_DOWNLOAD AS
SELECT USER_ID, COUNT(*) AS ATTEMPT, SUM(IF(SUCCESS, 1, 0)) AS SUCCESS
FROM ampad.DOWNLOAD
WHERE MONTH = 'OCT'
GROUP BY USER_ID;

CREATE TABLE ampad.OCT_CLIENT_NONSAGE_DOWNLOAD AS
SELECT CLIENT, COUNT(*) AS ATTEMPT, SUM(IF(SUCCESS, 1, 0)) AS SUCCESS
FROM ampad.DOWNLOAD
WHERE MONTH = 'OCT'
AND SAGE = FALSE
GROUP BY CLIENT;

CREATE TABLE ampad.CLIENT_NONSAGE_VIEW (
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
MAR BIGINT(20),
APR BIGINT(20),
MAY BIGINT(20),
JUN BIGINT(20),
JUL BIGINT(20),
AUG BIGINT(20),
SEP BIGINT(20),
OCT BIGINT(20),
TOTAL BIGINT(20)
);

INSERT IGNORE INTO ampad.CLIENT_NONSAGE_VIEW (CLIENT, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT)
SELECT 'WEB', 
(SELECT COUNT(*) FROM ampad.WEB_ACCESS_MAR WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959)),
(SELECT COUNT(*) FROM ampad.WEB_ACCESS_APR WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959)),
(SELECT COUNT(*) FROM ampad.WEB_ACCESS_MAY WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959)), 
(SELECT COUNT(*) FROM ampad.WEB_ACCESS_JUN WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959)),
(SELECT COUNT(*) FROM ampad.WEB_ACCESS_JUL WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959)),
(SELECT COUNT(*) FROM ampad.WEB_ACCESS_AUG WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959)),
(SELECT COUNT(*) FROM ampad.WEB_ACCESS_SEP WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959)),
(SELECT COUNT(*) FROM ampad.WEB_ACCESS_OCT WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959));

CREATE TABLE ampad.CLIENT_NONSAGE_DOWNLOAD (
CLIENT enum('R','PYTHON','WEB','JAVA','COMMAND_LINE','ELB_HEALTHCHECKER','UNKNOWN'),
MAR_ATTEMPT BIGINT(20), MAR_SUCCESS BIGINT(20),
APR_ATTEMPT BIGINT(20), APR_SUCCESS BIGINT(20),
MAY_ATTEMPT BIGINT(20), MAY_SUCCESS BIGINT(20),
JUN_ATTEMPT BIGINT(20), JUN_SUCCESS BIGINT(20),
JUL_ATTEMPT BIGINT(20), JUL_SUCCESS BIGINT(20),
AUG_ATTEMPT BIGINT(20), AUG_SUCCESS BIGINT(20),
SEP_ATTEMPT BIGINT(20), SEP_SUCCESS BIGINT(20),
OCT_ATTEMPT BIGINT(20), OCT_SUCCESS BIGINT(20),
TOTAL_ATTEMPT BIGINT(20), TOTAL_SUCCESS BIGINT(20)
);

INSERT INTO ampad.CLIENT_NONSAGE_DOWNLOAD (CLIENT, MAR_ATTEMPT, MAR_SUCCESS, APR_ATTEMPT, APR_SUCCESS, 
MAY_ATTEMPT, MAY_SUCCESS, JUN_ATTEMPT, JUN_SUCCESS, JUL_ATTEMPT, JUL_SUCCESS, AUG_ATTEMPT, AUG_SUCCESS,
SEP_ATTEMPT, SEP_SUCCESS, OCT_ATTEMPT, OCT_SUCCESS)
SELECT 'PYTHON', 
(SELECT COUNT(*) FROM ampad.DOWNLOAD_MAR 
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT SUM(IF(RESPONSE_STATUS < 400, 1, 0)) FROM ampad.DOWNLOAD_MAR
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT COUNT(*) FROM ampad.DOWNLOAD_APR
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT SUM(IF(RESPONSE_STATUS < 400, 1, 0)) FROM ampad.DOWNLOAD_APR
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT COUNT(*) FROM ampad.DOWNLOAD_MAY
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'), 
(SELECT SUM(IF(RESPONSE_STATUS < 400, 1, 0)) FROM ampad.DOWNLOAD_MAY
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'), 
(SELECT COUNT(*) FROM ampad.DOWNLOAD_JUN
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT SUM(IF(RESPONSE_STATUS < 400, 1, 0)) FROM ampad.DOWNLOAD_JUN
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT COUNT(*) FROM ampad.DOWNLOAD_JUL
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT SUM(IF(RESPONSE_STATUS < 400, 1, 0)) FROM ampad.DOWNLOAD_JUL
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT COUNT(*) FROM ampad.DOWNLOAD_AUG
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT SUM(IF(RESPONSE_STATUS < 400, 1, 0)) FROM ampad.DOWNLOAD_AUG
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT COUNT(*) FROM ampad.DOWNLOAD_SEP
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT SUM(IF(RESPONSE_STATUS < 400, 1, 0)) FROM ampad.DOWNLOAD_SEP
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT COUNT(*) FROM ampad.DOWNLOAD_OCT
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON'),
(SELECT SUM(IF(RESPONSE_STATUS < 400, 1, 0)) FROM ampad.DOWNLOAD_OCT
WHERE USER_ID NOT IN (273980, 274008, 372127, 3323072, 273995, 1968150, 273959) AND CLIENT = 'PYTHON');

UPDATE ampad.CLIENT_NONSAGE_DOWNLOAD
SET TOTAL_SUCCESS = IFNULL(MAR_SUCCESS,0)+IFNULL(APR_SUCCESS,0)+IFNULL(MAY_SUCCESS,0)+IFNULL(JUN_SUCCESS,0)
+IFNULL(JUL_SUCCESS,0)+IFNULL(AUG_SUCCESS,0)+IFNULL(SEP_SUCCESS,0)+IFNULL(OCT_SUCCESS,0);

CREATE TABLE ampad.MAR_ANONYMOUS_VIEWS
SELECT ENTITY_ID, COUNT(*) AS MAR
FROM ampad.MAR 
WHERE USER_ID = 273950 
AND CLIENT = 'WEB'
AND (NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2'
	 OR NORMALIZED_METHOD_SIGNATURE = 'GET /entity/#/wiki2/#')
GROUP BY ENTITY_ID;